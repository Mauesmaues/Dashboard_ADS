const { supabase } = require('../src/config/supabase');

async function testarConfiguracao() {
    console.log('üîç Testando configura√ß√£o do sistema...');
    console.log('');
    
    let tudoOk = true;
    
    try {
        // 1. Testar conex√£o b√°sica
        console.log('1Ô∏è‚É£ Testando conex√£o com Supabase...');
        await testarConexao();
        
        // 2. Testar estrutura de tabelas
        console.log('2Ô∏è‚É£ Verificando estrutura de tabelas...');
        await verificarTabelas();
        
        // 3. Testar usu√°rios
        console.log('3Ô∏è‚É£ Verificando usu√°rios...');
        await verificarUsuarios();
        
        // 4. Testar empresas
        console.log('4Ô∏è‚É£ Verificando empresas...');
        await verificarEmpresas();
        
        // 5. Testar dados
        console.log('5Ô∏è‚É£ Verificando dados...');
        await verificarDados();
        
        // 6. Testar permiss√µes
        console.log('6Ô∏è‚É£ Testando permiss√µes...');
        await testarPermissoes();
        
        console.log('');
        if (tudoOk) {
            console.log('‚úÖ Todos os testes passaram! Sistema configurado corretamente.');
        } else {
            console.log('‚ö†Ô∏è  Alguns testes falharam. Verifique os detalhes acima.');
        }
        
    } catch (erro) {
        console.error('‚ùå Erro durante os testes:', erro);
        tudoOk = false;
    }
    
    return tudoOk;
}

async function testarConexao() {
    try {
        const { data, error } = await supabase
            .from('acessoBI')
            .select('count')
            .limit(1);
            
        if (error) throw error;
        
        console.log('   ‚úÖ Conex√£o estabelecida');
        return true;
    } catch (erro) {
        console.error('   ‚ùå Falha na conex√£o:', erro.message);
        console.log('      üîß Verifique: .env, SUPABASE_URL, SUPABASE_KEY');
        return false;
    }
}

async function verificarTabelas() {
    const tabelas = ['acessoBI', 'empresas', 'contas_campanhas', 'dados_campanhas'];
    let todasExistem = true;
    
    for (const tabela of tabelas) {
        try {
            const { data, error } = await supabase
                .from(tabela)
                .select('*')
                .limit(1);
                
            if (error && error.message.includes('does not exist')) {
                console.log(`   ‚ùå Tabela '${tabela}' n√£o existe`);
                todasExistem = false;
            } else if (error) {
                console.log(`   ‚ö†Ô∏è  Tabela '${tabela}': ${error.message}`);
            } else {
                console.log(`   ‚úÖ Tabela '${tabela}' ok`);
            }
        } catch (erro) {
            console.log(`   ‚ùå Erro ao verificar '${tabela}': ${erro.message}`);
            todasExistem = false;
        }
    }
    
    if (!todasExistem) {
        console.log('      üîß Execute: scripts/criar-tabelas.sql no Supabase');
    }
    
    return todasExistem;
}

async function verificarUsuarios() {
    try {
        const { data, error } = await supabase
            .from('acessoBI')
            .select('email, nome, role, empresa, ativo');
            
        if (error) throw error;
        
        console.log(`   üìä Total de usu√°rios: ${data.length}`);
        
        const admin = data.find(u => u.role === 'Admin');
        if (admin) {
            console.log(`   üëë Admin encontrado: ${admin.email}`);
        } else {
            console.log('   ‚ö†Ô∏è  Nenhum admin encontrado');
        }
        
        const usuarios = data.filter(u => u.role === 'User');
        console.log(`   üë§ Usu√°rios normais: ${usuarios.length}`);
        
        // Listar usu√°rios
        data.forEach(user => {
            const empresas = Array.isArray(user.empresa) ? user.empresa.join(', ') : user.empresa;
            console.log(`      ‚Ä¢ ${user.email} (${user.role}) - ${empresas}`);
        });
        
        return true;
    } catch (erro) {
        console.error('   ‚ùå Erro ao verificar usu√°rios:', erro.message);
        return false;
    }
}

async function verificarEmpresas() {
    try {
        // Tentar tabela empresas primeiro
        let { data, error } = await supabase
            .from('empresas')
            .select('nome, codigo, ativo');
            
        if (error && error.message.includes('does not exist')) {
            console.log('   ‚ö†Ô∏è  Tabela empresas n√£o existe, verificando dados_campanhas...');
            
            // Fallback: buscar empresas √∫nicas em dados_campanhas
            const { data: dadosEmpresas, error: erroDados } = await supabase
                .from('dados_campanhas')
                .select('empresa')
                .neq('empresa', null);
                
            if (erroDados) throw erroDados;
            
            const empresasUnicas = [...new Set(dadosEmpresas.map(d => d.empresa))];
            console.log(`   üìä Empresas encontradas em dados: ${empresasUnicas.length}`);
            empresasUnicas.forEach(empresa => {
                console.log(`      ‚Ä¢ ${empresa}`);
            });
            
        } else if (error) {
            throw error;
        } else {
            console.log(`   üìä Total de empresas: ${data.length}`);
            data.forEach(empresa => {
                const status = empresa.ativo ? '‚úÖ' : '‚ùå';
                console.log(`      ${status} ${empresa.nome} (${empresa.codigo})`);
            });
        }
        
        return true;
    } catch (erro) {
        console.error('   ‚ùå Erro ao verificar empresas:', erro.message);
        return false;
    }
}

async function verificarDados() {
    try {
        const { data, error } = await supabase
            .from('dados_campanhas')
            .select('empresa, data, gastos, impressoes, cliques')
            .order('data', { ascending: false })
            .limit(10);
            
        if (error) throw error;
        
        console.log(`   üìä Total de registros encontrados: ${data.length}`);
        
        if (data.length > 0) {
            console.log('   üìÖ √öltimos registros:');
            data.slice(0, 5).forEach(registro => {
                console.log(`      ‚Ä¢ ${registro.data} - ${registro.empresa} - R$ ${registro.gastos}`);
            });
            
            // Estat√≠sticas b√°sicas
            const totalGastos = data.reduce((sum, r) => sum + (parseFloat(r.gastos) || 0), 0);
            const totalImpr = data.reduce((sum, r) => sum + (parseInt(r.impressoes) || 0), 0);
            const totalCliques = data.reduce((sum, r) => sum + (parseInt(r.cliques) || 0), 0);
            
            console.log(`   üí∞ Total gastos (amostra): R$ ${totalGastos.toFixed(2)}`);
            console.log(`   üëÅÔ∏è  Total impress√µes (amostra): ${totalImpr.toLocaleString()}`);
            console.log(`   üëÜ Total cliques (amostra): ${totalCliques.toLocaleString()}`);
        } else {
            console.log('   ‚ö†Ô∏è  Nenhum dado encontrado');
            console.log('      üîß Execute: node scripts/setup-inicial.js');
        }
        
        return true;
    } catch (erro) {
        console.error('   ‚ùå Erro ao verificar dados:', erro.message);
        return false;
    }
}

async function testarPermissoes() {
    try {
        // Buscar um usu√°rio n√£o-admin para testar
        const { data: usuarios, error } = await supabase
            .from('acessoBI')
            .select('email, empresa, role')
            .eq('role', 'User')
            .limit(1);
            
        if (error) throw error;
        
        if (usuarios.length === 0) {
            console.log('   ‚ö†Ô∏è  Nenhum usu√°rio regular encontrado para testar permiss√µes');
            return true;
        }
        
        const usuario = usuarios[0];
        const empresasUsuario = Array.isArray(usuario.empresa) ? usuario.empresa : [usuario.empresa];
        
        console.log(`   üîê Testando permiss√µes para: ${usuario.email}`);
        console.log(`   üè¢ Empresas permitidas: ${empresasUsuario.join(', ')}`);
        
        // Verificar se dados batem com permiss√µes
        const { data: dadosUsuario } = await supabase
            .from('dados_campanhas')
            .select('empresa')
            .in('empresa', empresasUsuario);
            
        if (dadosUsuario && dadosUsuario.length > 0) {
            console.log(`   ‚úÖ Usu√°rio tem ${dadosUsuario.length} registros acess√≠veis`);
        } else {
            console.log('   ‚ö†Ô∏è  Usu√°rio n√£o tem dados acess√≠veis');
        }
        
        return true;
    } catch (erro) {
        console.error('   ‚ùå Erro ao testar permiss√µes:', erro.message);
        return false;
    }
}

// Fun√ß√£o para teste r√°pido de login
async function testarLogin() {
    console.log('üîë Testando sistema de login...');
    
    const AuthModel = require('../src/models/authModel');
    
    try {
        // Testar login admin
        console.log('   Testando login admin...');
        const admin = await AuthModel.login('admin@conceitoprime.com', 'admin123');
        
        if (admin) {
            console.log(`   ‚úÖ Admin login ok: ${admin.email} (${admin.role})`);
        } else {
            console.log('   ‚ùå Admin login falhou');
        }
        
        // Testar login usu√°rio
        console.log('   Testando login usu√°rio...');
        const user = await AuthModel.login('user@empresaA.com', 'user123');
        
        if (user) {
            console.log(`   ‚úÖ User login ok: ${user.email} (${user.role})`);
        } else {
            console.log('   ‚ùå User login falhou');
        }
        
    } catch (erro) {
        console.error('   ‚ùå Erro no teste de login:', erro.message);
    }
}

// Executar testes
async function executar() {
    const sistemaOk = await testarConfiguracao();
    
    console.log('');
    console.log('üîë Teste adicional de login:');
    await testarLogin();
    
    console.log('');
    console.log('üìã RESUMO DOS TESTES:');
    console.log(sistemaOk ? '‚úÖ Sistema pronto para uso!' : '‚ùå Sistema precisa de configura√ß√£o');
    
    if (sistemaOk) {
        console.log('');
        console.log('üöÄ PR√ìXIMOS PASSOS:');
        console.log('1. Iniciar servidor: npm start ou node src/index.js');
        console.log('2. Acessar: http://localhost:3000/login.html');
        console.log('3. Login: admin@conceitoprime.com / admin123');
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    executar();
}

module.exports = {
    testarConfiguracao,
    testarLogin,
    verificarTabelas,
    verificarUsuarios
};
