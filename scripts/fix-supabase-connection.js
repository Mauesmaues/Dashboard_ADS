/**
 * Supabase Connection Fix Script
 * This script attempts to fix the "Project not specified" error
 */
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const path = require('path');
const fs = require('fs');

console.log('Supabase Connection Fix Utility');
console.log('==============================');
console.log(`Node.js Version: ${process.version}`);
try {
  console.log(`@supabase/supabase-js Version: ${require('@supabase/supabase-js').version}`);
} catch (e) {
  console.log('@supabase/supabase-js Version: Unknown');
}

// Get configuration from environment
const supabaseUrl = process.env.SUPABASE_URL?.trim() || '';
const supabaseKey = process.env.SUPABASE_KEY?.trim() || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('❌ Missing SUPABASE_URL or SUPABASE_KEY environment variables');
  process.exit(1);
}

console.log(`URL: ${supabaseUrl}`);
console.log(`Key length: ${supabaseKey.length} characters`);

// Extract project reference from URL
function getProjectRef(url) {
  try {
    const match = url.match(/https:\/\/([^.]+)\.supabase\.co/);
    return match ? match[1] : null;
  } catch (e) {
    return null;
  }
}

const projectRef = getProjectRef(supabaseUrl);
console.log(`Project reference: ${projectRef || 'Not found'}`);

// Test connection function
async function testConnection(clientConfig) {
  try {
    console.log(`\nTesting configuration: ${JSON.stringify(clientConfig)}`);
    
    const client = createClient(supabaseUrl, supabaseKey, clientConfig);
    const { data, error } = await client.from('companies').select('id').limit(1);
    
    if (error) {
      console.error(`❌ Failed: ${error.message}`);
      return false;
    }
    
    console.log(`✅ Success! Found ${data ? data.length : 0} records`);
    return true;
  } catch (err) {
    console.error(`❌ Exception: ${err.message}`);
    return false;
  }
}

// Test multiple configurations
async function runTests() {
  console.log('\nTrying different client configurations...');
  
  const configs = [
    { name: 'Default (no options)', options: {} },
    { name: 'Minimal auth', options: { auth: { persistSession: false } } },
    { name: 'With project header', options: { 
      global: { headers: { 'x-client-info': `fix-utility-${projectRef || 'unknown'}` } } 
    } },
    { name: 'Full configuration', options: {
      auth: { persistSession: false, autoRefreshToken: false },
      global: { headers: { 'x-client-info': `fix-utility-${projectRef || 'unknown'}` } },
      db: { schema: 'public' }
    } }
  ];
  
  // Try each configuration
  let successConfig = null;
  for (const [index, config] of configs.entries()) {
    console.log(`\nTest ${index + 1}: ${config.name}`);
    const success = await testConnection(config.options);
    if (success) {
      console.log('✅ This configuration works!');
      successConfig = config;
      break;
    }
  }
  
  if (successConfig) {
    // Create the fix file
    const fixContent = `
// Generated by fix-supabase-connection.js
// This configuration successfully connected to Supabase
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL?.trim() || '';
const supabaseKey = process.env.SUPABASE_KEY?.trim() || '';

console.log(\`Creating Supabase client with URL: \${supabaseUrl}\`);

// This configuration fixed the "Project not specified" error
const supabase = createClient(
  supabaseUrl, 
  supabaseKey,
  ${JSON.stringify(successConfig.options, null, 2)}
);

// Test connection function
async function testConnection() {
  try {
    console.log('Testing connection to Supabase...');
    const { data, error } = await supabase
      .from('companies')
      .select('*')
      .limit(1);
      
    if (error) {
      console.error('Connection test failed:', error.message);
      return false;
    }
    
    console.log('Connection successful!');
    return true;
  } catch (err) {
    console.error('Connection test exception:', err.message);
    return false;
  }
}

module.exports = {
  supabase,
  testConnection
};
    `;
    
    fs.writeFileSync(path.join(__dirname, 'supabase-fixed.js'), fixContent);
    console.log('\n✅ Success! Created supabase-fixed.js with working configuration');
    console.log('To use this file, rename it to supabase.js or copy its contents');
  } else {
    console.log('\n❌ None of the tested configurations worked');
    console.log('Here are some additional things to try:');
    console.log('1. Check if your Supabase project is active');
    console.log('2. Verify your API key is correct (anon or service_role key)');
    console.log('3. Try downgrading @supabase/supabase-js to version 2.38.4:');
    console.log('   npm install @supabase/supabase-js@2.38.4 --save');
  }
}

runTests();
